#include <iostream>

int main()
{

/*
OR(|) 연산을 이용해 내가 원하는 비트를 켜줄 수 있다.
AND(&) 연산을 이용해 채워진 비트를 확인 할 수 있다.
XOR(^) 연산을 이용해 비트를 제거할 수 도 있다.
하지만 꺼진 상태에서 사용시 켜진다.
*/
	const int	Attack = 0x1;		//     1
	const int	Armor = 0x2;		//    10
	const int	HP = 0x4;			//   100
	const int	MP = 0x8;			//  1000
	const int	Critical = 0x10;	// 10000

	int	Buf = 0;

	// Buf = 0 | 1 = 1
	Buf = Buf | Attack;

	// Buf = 001 | 100 = 101
	Buf = Buf | HP;

	// Buf = 00101 | 10000 = 10101
	Buf = Buf | Critical;

	// Buf = 10101 | 10000 = 10101
	Buf = Buf | Critical;

	// Buf = 10101 ^ 00100 = 10001
	Buf = Buf ^ HP;

	// Buf = 10001 ^ 00100 = 10101
	Buf = Buf ^ HP;

	// 10101 & 00001 = 00001
	std::cout << "Attack : " << (Buf & Attack) << std::endl;

	// 10101 & 00010 = 00000
	std::cout << "Armor : " << (Buf & Armor) << std::endl;

	// 10101 & 00100 = 00100
	std::cout << "HP : " << (Buf & HP) << std::endl;

	// 10101 & 01000 = 00000
	std::cout << "MP : " << (Buf & MP) << std::endl;

	//10101 & 10000 = 10000
	std::cout << "Critical : " << (Buf & Critical) << std::endl;

	/*
	쉬프트연산자 : <<, >> 2가지 연산이 제공

	<< : 2의 n승 단위의 곱셈이 빠르다
	10 << 2 =
	10 / 2 = 5 -- 0
	5 / 2 = 2 --- 1
	2 / 2 = 1 --- 0

	1010 << 2 = 101000 이 된다.
	결과값 : 40

	10 << 3 =
	1010 << 3 = 1010000 이 된다.
	결과값 : 80

	>> : 2의 n승 단위로 나눌때 빠름, 소수점 단위 전부 잘림
	40 >> 2 = 10
	101000 >> 2 = 1010
	결과값 : 10

	80 >> 3 = 10
	1010001 >> 3 = 1010
	*/

	/*
	비트단위논리연산자와 쉬프트연산자를 이용해 각 비트, 단위별로 공간에 정보를 넣어줄 수 도 있다.
	그리고 이 둘을 사용해 공간에 넣어준 정보의 각각의 값을 구할 수 있다.
	*/
	int	Color = 0;

	// 00000000 00000000 00000000 01100100
	Color = 100;

	// 00000000 00000000 01100100 00000000
	Color = Color << 8;

	//  00000000 00000000 01100100 00000000
	// |00000000 00000000 00000000 10000010
	//  00000000 00000000 01100100 10000010
	Color = Color | 130;

	//  00000000 01100100 10000010 00000000
	Color = Color << 8;

	//  00000000 01100100 10000010 00000000
	// |00000000 00000000 00000000 11001000
	//  00000000 01100100 10000010 11001000
	Color = Color | 200;

	//  01100100 10000010 11001000 00000000
	Color = Color << 8;

	//  01100100 10000010 11001000 00000000
	// |00000000 00000000 00000000 01001110
	//  01100100 10000010 11001000 01001110
	//Color = Color | 78;
	Color |= 78;

	std::cout << Color << std::endl;

	//  01100100 10000010 11001000 01001110
	// &00000000 00000000 00000000 11111111
	//  00000000 00000000 00000000 01001110
	std::cout << "B : " << (Color & 0x000000ff) << std::endl;

	//  01100100 10000010 11001000 01001110
	//  00000000 01100100 10000010 11001000
	// &00000000 00000000 00000000 11111111
	//  00000000 00000000 00000000 11001000
	std::cout << "G : " << ((Color >> 8) & 0x000000ff) << std::endl;

	//  01100100 10000010 11001000 01001110
	//  00000000 00000000 01100100 10000010
	// &00000000 00000000 00000000 11111111
	//  00000000 00000000 00000000 10000010
	std::cout << "R : " << ((Color >> 16) & 0x000000ff) << std::endl;

	//  01100100 10000010 11001000 01001110
	//  00000000 00000000 00000000 01100100
	// &00000000 00000000 00000000 11111111
	//  00000000 00000000 00000000 01100100
	std::cout << "A : " << ((Color >> 24) & 0xff) << std::endl;

	//연산자축약형
	int	Number = 100;
	
	Number += 10; // = 	Number = Number + 10;

	/*
	분기 : 여러 경우중 하나의 경우만 실행해주는 기능 if문, swich문 2가지 제공

	if문 : 
	if (조건식)
	{
	실행하고자하는 코드 작성
	}
	조건식은 true 아니면 false
	조건식이 true 라면 {} 안의 코드 동작
	조건식이 false라면 {} 안의 코드 무시
	실행되는 코드가 1줄이면 코드블럭 생략 가능

	else if (조건식)
	{
	조건식이 true일 경우 실행할 코드
	}
	혼자 사용 불가 반드시 if문과 함께 사용
	if문 아래에 존재해야하고 if문 1개당 다수 존재 가능
	if문이 false경우 조건 체크
	else 보다 위에 있어야함
	없어도 됨

	else
	{
	}
	혼자 사용 불가 반드시 if문과 함께 사용
	if문 아래에 존재해야하고 if문 1개당 1개
	if문이 false경우 동작 
	없어도 됨
	*/
	if (true)
	{
		std::cout << "조건이 true 입니다." << std::endl;
	}

	else
	{
		std::cout << "조건이 false 입니다." << std::endl;
	}

	/*
	입력 받기
	std::cin >> 변수;  -> 콘솔창에서 입력하면 됨
	cin : 정수를 입력해야함, 문자 입력시 걸러냄
	*/
	int	Menu = 0;
	std::cout << "1. 메뉴1" << std::endl;
	std::cout << "2. 메뉴2" << std::endl;
	std::cout << "3. 메뉴3" << std::endl;
	std::cout << "4. 메뉴4" << std::endl;
	std::cout << "메뉴를 선택하세요 : ";
	std::cin >> Menu;

	if (Menu == 1)
		std::cout << "Menu1 을 선택하였습니다." << std::endl;

	else if (Menu == 2)
		std::cout << "Menu2 을 선택하였습니다." << std::endl;

	else if (Menu == 3)
		std::cout << "Menu3 을 선택하였습니다." << std::endl;

	else if (Menu == 4)
		std::cout << "Menu4 을 선택하였습니다." << std::endl;

	else
		std::cout << "잘못된 메뉴를 선택하였습니다." << std::endl;

	/*
	블록(드래그) + Ctrl + K + C = 해당영역 주석

	주석이 걸린 상태에서
	블록 + Ctrl + K + U = 주석 해제
	*/

	return 0;
}
