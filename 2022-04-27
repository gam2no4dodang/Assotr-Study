#include <iostream>

/*
클래스 상속 : 클래스와 클래스 사이에 부모와 자식의 관계를 형성하여 부모클래스의
맴버를 자식클래스에서 물려받아 사용할 수 있게 해주는 기능이다.

장점 : 부모클래스에서 공통적으로 사용하는 맴버를 만들어주고 자식에서는 추가적인 멤버만
만들어서 사용할 수 있다.

protected : 클래스 외부에서는 접근이 불가능하고 클래스 내부나 자식클래스의 내부에서는
접근이 가능하다.

상속관계에서 자식 클래스를 이용해서 객체를 생성할 경우
생성자 호출순서 : 부모 -> 자식
소멸자 호출순서 : 자식 -> 부모
\
가상함수(함수오버라이딩) : 함수를 재정의하는 기능이다. 부모클래스에 선언된 함수를 자식클래스에
재정의하여 구현할 수 있는 기능을 말한다.
재정의를 할때는 이름과 인자가 동일해야 한다.

맴버함수 앞에 virtual 키워드를 붙여주면 해당 함수는 가상함수가 된다.
가상함수는 자식에 재정의를 해도 되고 안해도 된다.

상속관꼐에서 소멸자는 부모나 자식의 소멸자 상관 없이 동일한 형태의 함수로 인식된다.

가상함수를 가지고 있는 클래스는 가상함수 테이블은 가지게 된다.

가상함수 테이블은 가상함수의 메모리 주소를 저장하는 배열이다.
예를 들어 Output함수의 Output1 함수가 가상함수로 되어 있을 경우
Child클래스에서 Output을 재정의하고 Output1은 재정의가 안되어 있다.
이 경우 Child클래스의 가상함수 테이블에는 Output함수는 Child에 재정의된 Output
함수의 주소가 저장되고 Output1 함수는 Parent에 정의된 Output1 함수의 주소가 저장된다.
*/
class CParent
{
public:
	CParent()
	{
		std::cout << "CParent 생성자" << std::endl;
	}
	~CParent()
	{
		std::cout << "CParent 소멸자" << std::endl;
	}

private:
	int m_A;

public:
	int m_B;

protected:
	int m_C;

public:
	virtual void Output()
	{
		std::cout << "Parent Output" << std::endl;
	}
};

//public 으로 상속을 받게 되면 부모에 private으로 선언된 내용을 제외하고 모두
//사용가능하게 된다.
class CChild : public CParent
{
public:
	CChild()
	{
		std::cout << "CChild 생성자" << std::endl;
		m_C = 100;
		m_Child1 = 100;
		m_Array = new int[100];
	}

	~CChild()
	{
		std::cout << "CChild 소멸자" << std::endl;
		delete[] m_Array;
	}

public:
	int		m_Child1;
	int*	m_Array;

public:
	void Output()
	{
		std::cout << m_Child1 << std::endl;
		std::cout << "Child Output" << std::endl;
	}
};

//private으로 상속을 받게 되면 부모에 public이나 protected로 되어 있는 내용을
//private으로 바꿔주어서 사용할 수 없게 된다.
//자식클래스의 내부에서는 부모의 public이나 protected에 접근이 가능하지만 외부에서는
//public으로 되어있는 부모의 맴버도 접근이 불가능하다.
class CChild1 : public CParent
{
public:
	//클래스 이니셜라이저로 맴버를 초기화할때 부모의 맴버는 초기화가 불가능하고
	//생성자 함수 내부에서만 값을 부여할 수 있다.
	CChild1()
	{
		std::cout << "CChild1 생성자" << std::endl;
		m_C = 100;
	}

	~CChild1()
	{
		std::cout << "CChild1 소멸자" << std::endl;
	}
};

//public 으로 상속을 받게 되면 부모에 private으로 선언된 내용을 제외하고 모두
//사용가능하게 된다.
class CChildChile : public CChild
{
public:
	//클래스 이니셜라이저로 맴버를 초기화할때 부모의 맴버는 초기화가 불가능하고
	//생성자 함수 내부에서만 값을 부여할 수 있다.
	CChildChile()
	{
		std::cout << "CChildChile 생성자" << std::endl;
		m_C = 100;
	}

	~CChildChile()
	{
		std::cout << "CChildChile 소멸자" << std::endl;
	}
};

class CParent1
{
	CParent1()
	{
	}

	virtual ~CParent1()
	{
	}
};

class CChildTest : public CParent1
{
	CChildTest()
	{
	}

	virtual ~CChildTest()
	{
	}

public:
	void Test()
	{
		std::cout << "Test" << std::endl;
	}

	virtual void Test1()
	{
		std::cout << "CChildTest Test1" << std::endl;
	}
};

int main()
{
	CParent* Array[100];

	Array[0] = new CChild;
	Array[1] = new CChildChile;

	std::cout << std::endl;

	//부모타입으로 형변환 하는것을 업캐스팅 이라고 한다.
	//부모에서 자식타입으로 형변환 하는것을 다운캐스팅 이라고 한다.
	//Array[0] = (CParent*)&child;
	//Array[1] = (CParent*)&child1;
	//Array[2] = (CParent*)&childchild;

	//((CChild*)Array[0])->Output();

	//아래의 경우 문제가 발생한다.
	//dynamic_cast<형변환할타입>(형번환할객체) 를 이용해서 정상적인 상속관계에서의
	//형변환인지를 체크할 수 있다.
	//가상함수가 있는 상태에서 체크가 가능하다.
	//가상함수가 있을때 dynamic_cast를 하게되면 정상적인 형변환이 아닐 경우 nullptr
	//을 반환한다.
	//dynamic_cast<CChild*>)Array[1]);
	//((CChild*)Array[1])->Output();
	CChild c;
	CChildChile childchild;

	c.Output1();
	c.OutputPure1();

	CParent* p11 = &c;
	CChild* p22 = &childchild;

	p22->ChildOutput();

	p11->OutputPure1();
	CChild* c11 = nullptr;

	Array[0]->Output();

	CParent* c1 = &c;

	c1->Output1();

	c1->Output();

	CChildTest* p2 = nullptr;

	p2->Test();
	p2->Test1();

	return 0;
}
