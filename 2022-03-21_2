#include <iostream>

int main()
{
	/*
	포인터 : 메모리 주소를 저장하는 변수 타입이다.
	int, float 등 모든 변수 타입은 포인터 타입을 선언 할 수 있다.
	그래서 int 변수의 주소는 int 포인터 타입의 변수에 담을 수 있고,
	float 변수의 주소는 folat 포인터 타입의 변수에 담을 수 있다.

	변수의 주소를 선언할때는 변수 앞에 & 을 붙여주면 해당 변수의 주소가 된다.

	32비트 타겟의 프로그램은 메모리 주소가 16진수 8자리가 나오게되고
	64비트 터겟의 프로그램은 메모리 주소가 16진수 16자리가 나오게된다.
	즉, 포인터 변수는 메모리 주소를 저장하는 변수이므로
	32비트 타겟에서는 4바이트가 되고
	54비트 타겟에서는 8바이트가 된다.

	포인트 사용시 주의할점 : 이미 지워진 메모리를 참조하게 될 경우
	잘못 접근을 하면 문제가 발생한다.
	이렇게 지워진 메모리를 참조하는 포인터를 댕글링 포인터라고 한다.

	포인터 변수가 다른 변수의 메모리 주소를 가지고 있는 것을 참조한다라고 표현한다.

	포인터 변수가 가지고있는 메모리 주소가 있을 경우 해당 주소에 접근하는 것을 역참조라고 한다.
	*/
	int Number = 100;
	Number = 200;

	//std::cout << &Number << std::endl;

	/*
	포인터를 사용할때는 선언과 동시에 특정 주소를 주는게 아니라면 
	nullptr로 초기화를 해준다.
	nullptr은 0이다.
	*/
	int* NumberAddr = &Number;

	/*
	포인터 변수가 메모리 주소를 가지고 있을 경우 앞에 *을 붙이게되면
	해당 주소를 역으로 참조하게 되어서 해당 주소의 값을 가져오거나
	값을 변경 할 수 있게된다 (= 역참조)
	*/
	*NumberAddr = 999;

	std::cout << "Number Value : " << Number << std::endl;
	std::cout << "Number Addr : " << &Number << std::endl;
	std::cout << "NumberAddr Value : " << NumberAddr << std::endl;
	std::cout << "NumberAddr Addr : " << &NumberAddr << std::endl;

	/*
	배열의 이름은 해당 배열의 첫번째 요소의 메모리 주소이다.
	즉, 배열명은 포인터가 된다.
	*/
	int Array[100] = {};

	Array[1] = 30;

	int* pArray = Array;

	pArray[1] = 999;

	int Array1[5][5] = {};

	std::cout << Array1 << std::endl;

	//int* pArray1 = Array1;

	std::cout << "Array : " << Array << std::endl;
	std::cout << "Array[0] Addr : " << &Array[0] << std::endl;
	std::cout << "pArray : " << pArray << std::endl;
	std::cout << Array[1] << std::endl;
}
