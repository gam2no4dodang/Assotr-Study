
#include <iostream>
#include <time.h>

enum class AIType
{
	None,
	Easy,
	Hard,
	Max
};

enum class GameProgress
{
	PlayerWin,
	AIWin,
	Progress
};

AIType SelectAIType()
{
	int	AIState = 0;

	while (true)
	{
		system("cls");
		std::cout << "1. 쉬움" << std::endl;
		std::cout << "2. 어려움" << std::endl;
		std::cout << "난이도를 선택하세요 : ";
		std::cin >> AIState;

		if (AIState > (int)AIType::None &&
			AIState < (int)AIType::Max)
			break;
	}

	return (AIType)AIState;
}

void SetNumber(int* Number, int* AINumber)
{
	// 1 ~ 25까지의 숫자를 배열에 넣어준다.
	for (int i = 0; i < 25; ++i)
	{
		Number[i] = i + 1;
		AINumber[i] = i + 1;
	}

	// 숫자를 랜덤하게 배치해준다.
	for (int i = 0; i < 100; ++i)
	{
		int	Idx1 = rand() % 25;
		int	Idx2 = rand() % 25;

		int	Temp = Number[Idx1];
		Number[Idx1] = Number[Idx2];
		Number[Idx2] = Temp;

		Idx1 = rand() % 25;
		Idx2 = rand() % 25;

		Temp = AINumber[Idx1];
		AINumber[Idx1] = AINumber[Idx2];
		AINumber[Idx2] = Temp;
	}
}

void OutputNumber(int* Number, int* AINumber)
{
	std::cout << "============ Player ================================================= AI =================" << std::endl;

	for (int i = 0; i < 5; ++i)
	{
		for (int j = 0; j < 5; ++j)
		{
			if (Number[i * 5 + j] == INT_MAX)
				std::cout << "*\t";

			else
				std::cout << Number[i * 5 + j] << "\t";
		}

		std::cout << "\t\t";

		for (int j = 0; j < 5; ++j)
		{
			std::cout << "*\t";
			/*if (AINumber[i * 5 + j] == INT_MAX)
				std::cout << "*\t";

			else
				std::cout << AINumber[i * 5 + j] << "\t";*/
		}

		std::cout << std::endl;
	}
}

GameProgress CheckGameState(int Line, int AILine)
{
	std::cout << "Bingo Line : " << Line;
	std::cout << "\t\t\t\t\t\t";
	std::cout << "AI Bingo Line : " << AILine << std::endl;

	if (Line >= 5)
	{
		std::cout << "Player Win" << std::endl;
		return GameProgress::PlayerWin;
	}

	else if (AILine >= 5)
	{
		std::cout << "AI Win" << std::endl;
		return GameProgress::AIWin;
	}

	return GameProgress::Progress;
}

bool ChangNumber(int* Number, int CheckNumber)
{
	for (int i = 0; i < 25; ++i)
	{
		if (Number[i] == CheckNumber)
		{
			// 숫자가 있다면 해당 숫자를 *로 바꿔준다.
			Number[i] = INT_MAX;
			return true;
		}
	}
	return false;
}

int AISelectNumber(AIType AIState, int* AINumber)
{
	// 플레이어가 선택한 숫자를 모두 바꾸었다면 인공지능이
			// 선택할 수 있도록 한다.
	switch ((AIType)AIState)
	{
	case AIType::Easy:
	{
		//인공지능이 선택을 하기 위해서 현재 안바뀐 값을 저장할 배열을 만들어준다.
		int SelectArray[25] = {};
		//AI가 현재 선택할 수 있는 숫자가 몇개인지를 저장할 변수를 만들어준다.
		int SelectCount = 0;
		// 현재 입력 안된 값들을 찾아서 배열에 넣어준다.
		SelectCount = 0;

		for (int i = 0; i < 25; ++i)
		{
			// *이 아닌 일반 값일 경우
			if (AINumber[i] != INT_MAX)
			{
				// 배열에 이 값을 넣어준다.
				SelectArray[SelectCount] = AINumber[i];
				++SelectCount;
			}
		}

		return SelectArray[rand() % SelectCount];
	}

	case AIType::Hard:
	{
		// 전체 12줄 중 완성된 줄을 제외하고 나머지 미완성된 줄을
		// 체크하여 *의 수가 가장 많은 줄을 찾는다.
		int	StarCount = 0;
		int	CheckLine = 0;
		// Find는 한 줄에 별이 4개짜리 줄이 있을 경우
		// true로 바꾸어서 대각선 줄을 체크 안하도록 해주는\
			// 변수이다.
		bool	Find = false;
		for (int i = 0; i < 5; ++i)
		{
			// 가로 한 줄의 별 수를 체크하기 위한 변수.
			int	LineStarCount = 0;
			int	LineStarCount1 = 0;
			for (int j = 0; j < 5; ++j)
			{
				// 가로 줄 체크를 하는데 값이 *로 표시되는
				// INT_MAX일 경우 이 줄의 별 수를 증가시킨다.
				if (AINumber[i * 5 + j] == INT_MAX)
					++LineStarCount;

				// 세로 줄 체크를 하는데 값이 *로 표시되는
				// INT_MAX일 경우 이 줄의 별 수를 증가시킨다.
				if (AINumber[j * 5 + i] == INT_MAX)
					++LineStarCount1;
			}

			// 현재의 가로 줄이 기존에 체크해두었던 줄의 별 수보다
			// 크다면 현재 줄이 가능성이 가능 높은 줄이 된다.
			// LineStarCount < 5 를 한 이유는 한 줄이 완성이
			// 안되었을 경우에만 처리를 해야 하기 때문이다.
			if (StarCount < LineStarCount && LineStarCount < 5)
			{
				StarCount = LineStarCount;
				CheckLine = i;

				// *이 4개라면 다른 줄을 체크하더라도 이 이상의
				// 줄이 없으므로 이 줄을 선택하도록 한다.
				if (StarCount == 4)
				{
					Find = true;
					break;
				}
			}

			// 현재의 세로 줄이 기존에 체크해두었던 줄의 별 수보다
			// 크다면 현재 줄이 가능성이 가능 높은 줄이 된다.
			// LineStarCount1 < 5 를 한 이유는 한 줄이 완성이
			// 안되었을 경우에만 처리를 해야 하기 때문이다.
			if (StarCount < LineStarCount1 && LineStarCount1 < 5)
			{
				StarCount = LineStarCount1;
				CheckLine = i + 5;

				// *이 4개라면 다른 줄을 체크하더라도 이 이상의
				// 줄이 없으므로 이 줄을 선택하도록 한다.
				if (StarCount == 4)
				{
					Find = true;
					break;
				}
			}
		}

		// Find변수는 *이 4개짜리인 줄을 찾았을때 true가 되므로
		// false일때만 대각선을 체크해주도록 한다.
		if (!Find)
		{
			int	LineStarCount = 0;

			// 왼쪽 상단 -> 오른쪽 하단 대각선
			for (int i = 0; i < 25; i += 6)
			{
				if (AINumber[i] == INT_MAX)
					++LineStarCount;
			}

			if (StarCount < LineStarCount && LineStarCount < 5)
			{
				StarCount = LineStarCount;
				CheckLine = 10;

				// *이 4개라면 다른 줄을 체크하더라도 이 이상의
				// 줄이 없으므로 이 줄을 선택하도록 한다.
				if (StarCount == 4)
				{
					Find = true;
					break;
				}
			}

			if (!Find)
			{
				LineStarCount = 0;

				// 오른쪽 상단 -> 왼쪽 하단 대각선
				for (int i = 4; i < 21; i += 4)
				{
					if (AINumber[i] == INT_MAX)
						++LineStarCount;
				}

				if (StarCount < LineStarCount && LineStarCount < 5)
				{
					StarCount = LineStarCount;
					CheckLine = 11;
				}
			}
		}

		// 가로줄 중 하나가 최종 줄로 선정되었을 경우
		if (CheckLine <= 4)
		{
			// 예를 들어 가로 2번째 줄이 선정되었다면 CheckLine은
			// 1이 저장되어 있을 것이다.
			// 이 경우 1 * 5 + 0 ~ 4 가 되므로
			// 5 ~ 9 번인덱스를 의미하므로 가로 2번째 줄을
			// 하나씩 체크를 하게 되는 것이다.
			for (int i = 0; i < 5; ++i)
			{
				if (AINumber[CheckLine * 5 + i] != INT_MAX)
				{
					return AINumber[CheckLine * 5 + i];
				}
			}
		}

		// 세로줄 중 하나가 최종 줄로 선정되었을 경우
		else if (CheckLine <= 9)
		{
			for (int i = 0; i < 5; ++i)
			{
				if (AINumber[i * 5 + (CheckLine - 5)] != INT_MAX)
				{
					return AINumber[i * 5 + (CheckLine - 5)];
				}
			}
		}

		// 왼쪽 상단 -> 오른쪽 하단
		else if (CheckLine == 10)
		{
			for (int i = 0; i < 25; i += 6)
			{
				if (AINumber[i] != INT_MAX)
				{
					return AINumber[i];
				}
			}
		}

		// 오른쪽 상단 -> 왼쪽 하단
		else
		{
			for (int i = 4; i < 21; i += 4)
			{
				if (AINumber[i] != INT_MAX)
				{
					return AINumber[i];
				}
			}
		}
	}
	}
	return -1;
}

int CheckLine(int* Number)
{
	// 빙고 줄을 체크한다.
		// 빙고 줄을 0으로 초기화를 하고 모든 줄을 체크해본다.
	int Line = 0;

	for (int i = 0; i < 5; ++i)
	{
		int	CheckCount = 0, CheckCount1 = 0;

		for (int j = 0; j < 5; ++j)
		{
			// 가로 줄 체크
			if (Number[i * 5 + j] == INT_MAX)
				++CheckCount;

			// 세로 줄 체크
			if (Number[j * 5 + i] == INT_MAX)
				++CheckCount1;
		}

		// 가로 한 줄을 체크했는데 CheckCount 변수가
		// 5라면 해당 줄은 모두 *로 변경되어 있다는 것이다.
		if (CheckCount == 5)
			++Line;

		if (CheckCount1 == 5)
			++Line;
	}

	int	CheckCount2 = 0, AICheckCount2 = 0;
	// 왼쪽 상단 -> 오른쪽 하단
	for (int i = 0; i < 25; i += 6)
	{
		if (Number[i] == INT_MAX)
			++CheckCount2;
	}

	if (CheckCount2 == 5)
		++Line;

	CheckCount2 = 0;

	// 오른쪽 상단 -> 왼쪽 하단
	for (int i = 4; i <= 20; i += 4)
	{
		if (Number[i] == INT_MAX)
			++CheckCount2;
	}

	if (CheckCount2 == 5)
		++Line;

	return Line;
}


int main()
{
	srand((unsigned int)time(0));
	int Random = rand();

	AIType AIState = SelectAIType();

	// 1 ~ 25 까지의 숫자를 저장하기 위한 공간을 준비한다.
	int	Number[25] = {};
	int	AINumber[25] = {};

	//1 ~ 25사이의 숫자를 지정하고 섞어준다.
	SetNumber(Number, AINumber);

	int	Line = 0, AILine = 0;

	while (true)
	{
		system("cls");

		OutputNumber(Number, AINumber);

		GameProgress GameState = CheckGameState(Line, AILine);

		if (GameState != GameProgress::Progress)
			break;

		std::cout << "Input Number(0 : Exit) : ";
		int	CheckNumber = 0;
		std::cin >> CheckNumber;

		if (CheckNumber == 0)
			break;

		else if (CheckNumber < 0 || CheckNumber > 25)
			continue;

		// 배열의 각 요소와 체크값을 비교하여 해당 값이 있는지
		// 판단한다.
		bool	Check = false;

		//정상적인 숫자를 입력하여 플레이어의 숫자가 *로 바뀌었을 경우
		//AI의 숫자도 해당 값을 찾아서 *로 바꾸어준다.
		if (!ChangNumber(Number, CheckNumber))
			continue;

		CheckNumber = AISelectNumber(AIState, AINumber);

		std::cout << "AI Select : " << CheckNumber << std::endl;
		//system("pause");

		// AI가 선택한 숫자를 *로 바꿔주도록 한다.
		ChangNumber(Number, CheckNumber);
		ChangNumber(AINumber, CheckNumber);

		//빙고 줄을 체크한다.
		//빙고 줄을 0으로 초기화를 하고 모든 줄을 체크해본다.
		Line = CheckLine(Number);
		AILine = CheckLine(AINumber);
	}

	return 0;
}
