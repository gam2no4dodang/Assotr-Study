#include<iostream>
/*
함수 : 원하는 코드를 모아서 구현을 해놓은 뒤에 원할때마다
해당 코드를 동작시켜줄 수 있게 해주는 기능을 함수라고 한다.

반환타입 함수이름(인자)
{
	동작시킬 코드
}

반환타입: 이 함수를 동작시키고 이 함수에서 원하는 결과가
있을 경우 그 결과를 얻어오고자 할때 해당 결과의 변수 타입을 지정하면된다.
void를 반환타입으로 사용한다면 결과를 반환하는 것이 없다하는 의미로 사용하게 된다.
int를 반환타입으로 사용한다면 이 함수를 실행하고 결과로 정수를
얻어오고자 할때 int를 반환타입으로 사용하는 것이다.
return 키워드를 이용해서 함수의 결과를 반환한다.

함수이름 : 원하는대로 이름을 만들어줄 수 있다.
단, 이 함수가 수행하는 기능에 맞는 이름을 잘 작성해 주어야한다.

인자 : 있을수도 있고 없을수도 있다.
인자는 이 함수의 기능을 수행하기 위해서 이 함수의 외부에서
어떤 값을 넘겨주어야 할 경우 사용한다.
인자에 변수를 선언해서 이 함수를 호출할때 해당 변수에 값을
넘겨주도록 하여 함수내애서 코드가 동작될때 그 값을 이용하여
원하는 기능을 만들어주는 개념이다.
*/

//이 함수는 반환타입은 int라서 반드시 정수를 반환해야하고
//인자는 int 타입 인자를 2개 받고 있다.
int Add(int Number1, int Number2)
{
	//인자로 들어온 2개의 정수를 서로 더하여 그 결과를 반환하게 한다.
	return Number1 + Number2;
}

void TestFunction(int* Number)
{
	int Number2 = 500;

	Number = &Number2;
}

void TestFunction1(int** Number)
{
	int Number2 = 500;

	*Number = &Number2;

	std::cout << "Number2 Addr : " << &Number2 << std::endl;
}

void TestFunction2(int*& Number)
{
	int Number2 = 500;

	Number = &Number2;

	std::cout << "Number2 Addr : " << &Number2 << std::endl;
}

int main()
{
	/*
	함수를 호출하여 함수에 구현되어 있는 코드를 동작되게 한다.
	아래처럼 호출하면 Add함수의 Number1과 Number2에 10과 20이 각각 들어가게 된다.
	그리고 그 결과를 반환하여 Number변수에 넣어주고있다.
	*/
	int Number = Add(10, 20);

	std::cout << Number << std::endl;

	std::cout << Add(40, 50) << std::endl;

	int Number1 = 100, Number2 = 300;

	std::cout << Add(Number1, Number2) << std::endl;

	int* pNumber = new int;

	delete pNumber;

	/*
	이렇게 해줄 경우 댕글링포인터가 된다.
	위에서 메모리를 제거했는데 그 메모리에 접근하려고 하기 때문에 문제가 된다.
	*/
	//*pNumber = 500;

	int* pNumber1 = nullptr;

	TestFunction(pNumber1);

	std::cout << pNumber1 << std::endl;

	TestFunction1(&pNumber1);

	std::cout << pNumber1 << std::endl;

	//*pNumber1 = 999;

	std::cout << *pNumber1 << std::endl;

	TestFunction2(pNumber1);

	std::cout << pNumber1 << std::endl;

	return 0;
}
