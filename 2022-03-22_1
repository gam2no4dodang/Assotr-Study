#include <iostream>

int main()
{
	/*
	포인터 연산 : 덧셈, 뺄셈을 지원한다.
	일반적인 사칙연산은 1을 더할 경우 단순하게 값이 1 증가하게 되지만
	포인터의 경우는 1을 더하면 단순하게 1이 증가하는 개념이 아닌 해당 포인터 타입
	(int포인터 이면 int, float포인터이면 float) 메모리 크기 만큼 증가하게 된다.
	즉 2를 더하게 되면 int포인터의 경우 int의 크기인 4byte * 2 만큼
	메모리 주소의 값이 증가하게 되는 것이다.

	배열이름 = 배열 시작 주소
	*/
	int Array[10] = {};

	for (int i = 0; i < 10; ++i)
	{
		Array[i] = i + 1;
	}

	int* pArray = Array;

	bool Array1[10] = {};
	bool* pArray1 = Array1;

	std::cout << "pArray : " << pArray << std::endl;
	std::cout << "pArray + 1 : " << pArray + 1 << std::endl;
	std::cout << "pArray + 2 : " << pArray + 2 << std::endl;
	std::cout << "pArray - 1 : " << pArray - 1 << std::endl;
	std::cout << "pArray - 2 : " << pArray - 2 << std::endl;

	std::cout << "pArray1 : " << pArray1 << std::endl;
	std::cout << "pArray1 + 1 : " << pArray1 + 1 << std::endl;
	std::cout << "pArray1 + 2 : " << pArray1 + 2 << std::endl;

	pArray[1] = 300;
	*(pArray + 1) = 600;

	/*
	포인터 ++(증감) 해주고 다시 [0] 해주면 
	주소값이 ++되어 바뀐 상태로 [0] 된다.
	*/
	++pArray;

	pArray[0] = 900;

	std::cout << "Array[1] : " << Array[1] << std::endl;

	const int Number = 999;
	int Number1 = 1010;
	int Number2 = 3030;

	/*
	Number는 상수이므로 주소를 붙여주면 const*가 된다.
	pNumber는 일반 포인터 타입이므로 타입이 달라서 에러가 발생한다.
	포인터 타입 왼쪽에 const를 붙여줄 경우 해당 포인터 변수는
	다른 변수의 메모리 주소로 값을 변경하는 것이 가능하다.
	단, 해당 주소에 접근하여(역참조) 값을 변경하는 것은 불가능하다.
	값을 가져다 사용하는 용도로는 가능하다.
	역참조로 값을 얻어오기는 가능하다

	const 변수 타입* 이름 = &이름;
	*/
	const int* pNumber = &Number;
	const int* pNumber1 = &Number1;

	pNumber = &Number1;
	//pNumber1 = 500;
	std::cout << *pNumber1 << std::endl;

	/*
	포인터 타입의 오른쪽에 const를 붙일 경우 const int타입의 
	메모리 주소는 지정이 불가능하다.
	int* const pNumber2 = &Number;
	처음에 지정된 주소 이외에 다른 변수의 주소로 변경이 불가능하다.
	단, 역참조를 통해 참조하는 대상의 값을 변경하는 것이 가능하다.

	변수 타입* const 이름 = &이름;
	*/
	int* const pNumber2 = &Number1;

	//pNumber2 = &Number2;
	*pNumber2 = 9090;

	/*
	위의 2가지 특징이 모두 적용되어 
	참조하는 대상도 변경이 불가능하고
	참조하는 대상의 값도 변경이 불가능하다.

	const 변수 타입* const 이름 = &이름;
	*/
	const int* const pNumber3 = &Number1;

	//pNumber3 = &Number2;
	//*pNumber3 = 2222;

	/*
	void : 타입이 없다는 의미이다.
	일반 void 타입은 변수 선언시에는 사용할 수 없다.
	void는 포인터 타입을 선언하여 사용이 가능하다.
	void포인터를 선언하면 타입이 없는 포인터가 선언되어 어떤 변수 타입의
	메모리 주소라도 다 저장이 가능하다.
	단, 반쪽짜리 만능이다.
	왜냐하면 역참조가 불가능하다.
	그래서 저장된 주소로 역참조를 하기 위해서는 형변환을 통해 접근해야 한다.
	타입이 없어서 연산이 불가능하지만 형변환시 가능하다.

	void* 이름 = &이름;
	*/
	void* pNumber4 = &Number2;

	*((int*)pNumber4) = 191919;
	//*((float*)pNumber4) = 3.14f; = 소수점도 인식해서 값이 이상하게 나옴

	std::cout << Number2 << std::endl;

	/*
	이중포인터 : 포인터의 포인터이다.
	일반 포인터 -> 일반 변수의 메모리 주소를 저장하기 위한 변수라면
	이중포인터 -> 포인터 변수의 메모리 주소를 저장하기 위한 변수

	변수 타입** 이름 = &이름;

	삼중 포인터 : 이중 포인터 변수의 메모리 주소를 저장하기 위한 변수이다.
	*/
	int* pNumber5 = &Number1;
	int** ppNumber = &pNumber5;

	/*
	ppNumber는 pNumber5의 주소를 가지고 있으므로 역참조를 하면 
	pNumber5가 가지고 있는 메모리 주소를 변경할 수 있다.
	여기서는 pNumber5가 Number1의 메모리 주소를 가지고 있었는데
	Number2의 주소를 가질 수 있도록 변경한 것이다.
	*/
	*ppNumber = &Number2;
	**ppNumber = 334455;

	std::cout << "Number1 : " << Number1 << std::endl;
	std::cout << "Number2 : " << Number2 << std::endl;

	return 0;
}
